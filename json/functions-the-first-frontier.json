{"content":"<p><img src=\"/img/mamba.gif\" alt=\"function\" /></p>\n<h1 id=\"explanation\">Explanation</h1>\n<h2 id=\"whyshouldicareaboutthisijustwanttoknowreact\">Why Should I care about this I just want to know REACT</h2>\n<ul>\n<li>JavaScript Functions are incredibly versatile and in javascript they are what's known as\nfirst class citizens meaning they can be passed around like any other object.</li>\n<li>Functions are literally objects in JS the same way Arrays are as you learned yesterday.</li>\n<li>We will be using Functions everyday in JavaScript so you will learn more and more about them daily through repitition.</li>\n</ul>\n<h2 id=\"setup\">Setup</h2>\n<p>make a file <code>functions.js</code></p>\n<p>Test that a console.log will appear in Terminal when you run the file.</p>\n<pre><code>$ node functions.js\n</code></pre>\n<h2 id=\"whatisafunction\">What is a function?</h2>\n<pre><code class=\"javascript language-javascript\">// 2 ways of creating functions\n\n// function declaration\n     function one () {\n         return 'one'\n     }\n     one()\n\n // function expression\n     const two = () =&gt; {\n         return 2\n     }\n     const shotenedTwo = () =&gt; 2\n</code></pre>\n<h2 id=\"describewhyweusefunctions\">Describe why we use functions</h2>\n<p>Using functions is another application of DRY. Don't Repeat Yourself. With a function, you can store code that can be used conveniently as many times as you wish, without having to rewrite the code each time.</p>\n<h1 id=\"demonstration\">Demonstration</h1>\n<h2 id=\"definingafunction\">Defining a function</h2>\n<pre><code class=\"javascript language-javascript\">const printBoo = () =&gt; {\n    console.log('======');\n    console.log('Boo!');\n    console.log('======');\n};\n</code></pre>\n<p>Always use <strong><code>const</code></strong> to declare your functions. It would be a strange day when a function would need to be reassigned.</p>\n<p>The code will not run yet. The function needs to be <strong>invoked</strong>.</p>\n<h2 id=\"invokeafunction\">Invoke a function</h2>\n<p>Use one line of code to run multiple lines of code</p>\n<pre><code class=\"javascript language-javascript\">printBoo();\n</code></pre>\n<p>Simply use the name of the variable and use <strong>parentheses</strong> to invoke the function.</p>\n<p>If the parentheses are not included, the function will not run.</p>\n<p>The invocation comes <strong>after</strong> the function definition. If you write it beforehand, it will be trying to invoke something that doesn't yet exist according to the interpreter.</p>\n<p>This will work:</p>\n<pre><code class=\"javascript language-javascript\">const printBoo = () =&gt; {\n    console.log('======');\n    console.log('Boo!');\n    console.log('======');\n};\n\nprintBoo();\n</code></pre>\n<p>VS</p>\n<p>This will not:</p>\n<pre><code class=\"javascript language-javascript\">printBoo();\n\nconst printBoo = () =&gt; {\n    console.log('======');\n    console.log('Boo!');\n    console.log('======');\n};\n</code></pre>\n<h1 id=\"imitation\">Imitation</h1>\n<h2 id=\"codealong\">Code Along</h2>\n<ul>\n<li>Write a function <code>printSum</code> that will console.log the result of 10 + 10</li>\n</ul>\n<p><strong>Extra Reps</strong></p>\n<ul>\n<li><p>Write a function <code>printTriangle</code> that will print these pound signs to the console (there are 5 console.logs inside the function):</p>\n<pre><code>#\n##\n###\n####\n#####\n</code></pre></li>\n<li><p>Make it so that <code>printTriangle</code> will print the pound signs using a for loop (there is a for loop and only 1 console.log inside the function).  </p></li>\n<li><p>Make it so that when you can invoke the function with the number of pound signs to print (not just hardcoded to print 5)</p></li>\n</ul>\n<h2 id=\"properlynameafunction\">Properly name a function</h2>\n<p>The variable you use for a function should contain a <strong>verb</strong>. Functions <strong>do</strong> something, most often:</p>\n<ul>\n<li>getting data</li>\n<li>setting data</li>\n<li>checking data</li>\n<li>printing data</li>\n</ul>\n<p>If the purpose of your function is to check data, for example, use the verb <code>check</code> in the variable name.</p>\n<p>Example function that contains a conditional:</p>\n<pre><code class=\"javascript language-javascript\">const checkInputLength = (input) =&gt; {\n    if (input.length &gt; 10) {\n        console.log('input length is greater than 10');\n    } else {\n        console.log('input length is not greater than 10');\n    }\n};\n</code></pre>\n<ol>\n<li>A Function name should always start with a verb</li>\n<li>A function if possible should be pure meaning it shouldn't effect anything outside of itself</li>\n<li>If it does effect something outside of itself you should let the resder of the function know that by the name for example we could have a function that checks if something is or isn't something</li>\n<li>we could also have a function that changes something or <strong>Mutates</strong> something like when you are playing a video game and you score a point, the function that updates the score could be called updateScore or setScore or changeScore</li>\n<li>Functions should try to do <strong>only one thing</strong> If a function, called <code>checkInputLength</code>, does more than just check input, then it is a poor function.</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">    // function that mutates\n    const ricMershon = {\n    age: 21\n    }\n    const scottDraper = {\n    age: 25\n    }\n\n    const increaseAge = (person) =&gt; {\n      person.age += 1\n      console.log (`Horray it's your ${person.age} birthday`)\n    }\n</code></pre>\n<p>Takeaway: Think about appropriate <strong>verbs</strong> to use in your function variable names. The verbs should indicate the <strong>one thing</strong> that the function does.</p>\n<h2 id=\"writeanarrowfunctionwithaparameter\">Write an arrow function with a parameter</h2>\n<p>The preceding function, <code>checkInputLength</code> had a <strong>parameter</strong> called <code>input</code>.</p>\n<p>Functions can receive input that modify their behavior a bit.  This input is called a <strong>parameter</strong>.</p>\n<p>In the below example, the parameter is arbitrarily called <code>name</code>. We can call our parameters whatever we want - whatever makes semantic sense.</p>\n<p>Using <strong>concatenation</strong> I can put the input into a string:</p>\n<pre><code class=\"javascript language-javascript\">const sayName = (name) =&gt; {\n    console.log('Hello! My name is ' + name);\n}\n</code></pre>\n<p>When we <em>invoke</em> the function, we can specify the value of the parameter, this is called an <strong>argument</strong>:</p>\n<pre><code class=\"javascript language-javascript\">sayName(\"Frodo\");\n</code></pre>\n<p>We can continue to invoke the function with whatever <strong>arguments</strong> we want:</p>\n<pre><code class=\"javascript language-javascript\">sayName(\"Merry\");\nsayName(\"Pippin\");\nsayName(\"Sam\");\n</code></pre>\n<p>Each time, the output of the function will change to reflect the argument.</p>\n<h3 id=\"argumentvsparameter\">Argument vs Parameter</h3>\n<p>The <strong>argument</strong> is the input, the <strong>parameter</strong> is how the input is represented in the function.</p>\n<pre><code class=\"javascript language-javascript\">const func = (PARAMETER) =&gt; {\n    // some code\n}\n\nfunc(ARGUMENT);\n</code></pre>\n<h2 id=\"writeanarrowfunctionwithmultipleparameters\">Write an arrow function with multiple parameters</h2>\n<p>A function can take any number of parameters.</p>\n<pre><code class=\"javascript language-javascript\">const calculateArea = (num1, num2) =&gt; {\n    console.log(num1 * num2);\n}\n</code></pre>\n<p>When you invoke the function, you generally want to supply the right number of arguments.</p>\n<pre><code class=\"javascript language-javascript\">calculateArea(4, 4)\n</code></pre>\n<blockquote>\n  <p>=&gt; 16</p>\n</blockquote>\n<h2 id=\"howdoesthisworkakatheexecutioncontextinterviewquestionanswer\">How does this work? Aka (The Execution Context Interview Question Answer)</h2>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\n</code></pre>\n<p>so in our code we have now created a variable myNum on line 1  that is equal to 2 and then created\na variable called sqaure that is equal to the function we created.</p>\n<p>JavaScript does 3 super awesome things that makes it a great very first programming language, and that makes\nit elegant enough to be used by developers with decades of experience.</p>\n<p>We will go over those things as we go through this course but what pertains to us is the awesome feature of the\nJavaScript being single threaded and reading code line by line and executing code only when you ask it to.</p>\n<p>So in JS when it comes to what's running in our code we are never too confused if we remember JS goes line by\nline and 1 at a time.</p>\n<p>And we keep track of this in what's called our Execution Context\n<img src=\"https://media.git.generalassemb.ly/user/15881/files/d4842a00-3df3-11ea-909c-33a0a198c451\" alt=\"js engine 1\" /></p>\n<p>So when the JS Engine looks at our code it will start at the top and perform each operation line by line</p>\n<p><img src=\"https://media.git.generalassemb.ly/user/15881/files/d77f1a80-3df3-11ea-90dd-edd3b3f119ef\" alt=\"js engine 2\" /></p>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\nconst ans = square(myNum)\n</code></pre>\n<p><img src=\"https://media.git.generalassemb.ly/user/15881/files/db12a180-3df3-11ea-8acb-33e15c196cf3\" alt=\"js engine 3 updated\" /></p>\n<p>So as you can see when we call a function we go ahead and add it to the stack of things that we want JS to\ndo. Once JS has finished that task it goes back to the main code on the next line and runs again.</p>\n<p>So once square has completed running it will give us a value and assign it to ans</p>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\nconst ans = square(myNum)\nconsole.log(\"Hello World\")\n</code></pre>\n<p>what order will this happen</p>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\nconsole.log(\"Hello World\")\nconst ans = square(myNum)\n</code></pre>\n<p>what about this?</p>\n<h2 id=\"breakaproblemdownintosteps\">Break a problem down into steps</h2>\n<p>Write a function that will <strong>return</strong> true if a word is a Palindrome, or will <strong>return</strong> false if not.</p>\n<ul>\n<li>Problem solve one step at a time</li>\n<li>Each step might require research</li>\n</ul>\n<p>Work in layers, one layer at a time. Don't jump ahead until each piece has been tested and works.</p>\n<p>Determine if each step will require research, and research it.</p>\n<ul>\n<li>reverse the word (how?)</li>\n<li>check if the word is the same as the reverse (how?)</li>\n<li>return true or false</li>\n</ul>\n<pre><code class=\"javascript language-javascript\">    // --- Examples:\n    //   palindrome(\"racecar\") === true\n    //   palindrome(\"abcdefghijklmnop\") === false\n</code></pre>\n<h1 id=\"practice\">Practice</h1>\n<h2 id=\"exercises\">Exercises</h2>\n<ul>\n<li><p>Write a function called square that takes in a number and squares it and then assign the result to variable called ans\n<code>javascript\n    square(5); // 25\n</code></p></li>\n<li><p>Write a function called <code>minusOne</code> that takes a parameter <code>num</code>. Assuming the argument is a number, print the argument -1.</p>\n<pre><code class=\"javascript language-javascript\">minusOne(10);        // 9\nminusOne(100);       // 99\nminusOne(Infinity);  // Infinity\n</code></pre></li>\n<li><p>Write a function <code>makeSentence</code> that takes <strong>three</strong> parameters and <strong>concatenates</strong> them into a fully formed sentence.</p>\n<pre><code class=\"javascript language-javascript\">makeSentence('I', 'want', 'chimichangas');\n</code></pre>\n<blockquote>\n  <p>=&gt; 'Oh boy, do I want chimichangas or what?'</p>\n</blockquote></li>\n</ul>\n<p><strong>Extra</strong></p>\n<ul>\n<li><p>Write a function called <code>getLastElement</code> that takes a parameter <code>arr</code>.</p></li>\n<li><p>Invoke the function with an <strong>array</strong> as the argument.</p></li>\n<li><p>The function should print the <strong>last element</strong> within the array.</p>\n<pre><code class=\"javascript language-javascript\">getLastElement([1, 2, 3, 4, 5, 6]);       // 6\ngetLastElement(['a', 'b', 'c']);          // 'c'\ngetLastElement([[1, 2, 3], [4, 5, 6]]);   // [4, 5, 6]\n</code></pre>\n<p><em>Hint:</em> <code>arr[arr.length - 1]</code></p></li>\n</ul>\n<p><strong>Extra</strong></p>\n<ul>\n<li><p>Write a function <code>divideThreeNums</code> that takes <strong>three</strong> parameters and prints the third parameter divided by the result of the second parameter divided by the first.</p>\n<pre><code class=\"javascript language-javascript\">divideThreeNums(10, 5, 2)   // 4\ndivideThreeNums(30, 2, 9)   // 135\n</code></pre></li>\n</ul>\n<h3 id=\"exercisesakaexamplewhiteboardquestionsforjuniordevs\">Exercises ( aka example whiteboard questions for junior devs)</h3>\n<ul>\n<li>Write a function that accepts a string.  The function should capitalize the first letter of each word in the string then\nreturn the capitalized string.</li>\n</ul>\n<pre><code class=\"javascript language-javascript\">    // --- Examples\n    //   capitalize('a short sentence') --&gt; 'A Short Sentence'\n    //   capitalize('a lazy fox') --&gt; 'A Lazy Fox'\n    //   capitalize('look, it is working!') --&gt; 'Look, It Is Working!'\n</code></pre>\n<ul>\n<li><p>Write a function that takes three parameters (numbers), sums them, converts the sum into a string and returns the string (eg. <code>\"123\"</code>)</p>\n<ul>\n<li>Use your google-fu to research converting a number into a string</li>\n<li>Invoke the function a couple of times with different arguments each time</li></ul></li>\n<li><p>Experiment</p>\n<ul>\n<li>What happens if you supply more arguments than there are parameters?</li>\n<li>What happens if you supply fewer arguments than there are parameters?</li></ul></li>\n</ul>","data":{"title":"Functions The First Frontier","subTitle":"An Introduction to Functions in JavaScript","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/functions.png","date":"10/28/21","order":0},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/bigpoppacode.io/api/functions-the-first-frontier.md","_id":"functions-the-first-frontier"}