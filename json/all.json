[{"content":"<h2 id=\"formhandling\">Form Handling</h2>\n<p>There are two ways to handle forms in React.</p>\n<ul>\n<li><p><strong>Controlled Forms:</strong> The value of the inputs are bound to state, so value of state and the value of the inputs are always in sync.</p></li>\n<li><p><strong>Uncontrolled Forms:</strong> The forms are not bound by state, instead their values are pulled using a ref when needed.</p></li>\n</ul>\n<h3 id=\"exampleofacontrolledform\">Example of a Controlled Form</h3>\n<p>Parts:</p>\n<ul>\n<li>object holding form values as state</li>\n<li>handleChange function that updates the state when we type into the form</li>\n<li>handleSubmit function to handle form submission and do what you want with the data</li>\n</ul>\n<pre><code class=\"js language-js\">import { useState } from \"react\"\n\nexport default function Form(props) {\n  //State to hold the form data\n  const [form, setForm] = useState({\n    name: \"\",\n    age: 0,\n  })\n\n  // handleChange function\n  const handleChange = event =&gt; {\n    // dynamically update the state using the event object\n    // this function always looks the same\n    setForm({ ...form, [event.target.name]: event.target.value })\n  }\n\n  const handleSubmit = event =&gt; {\n    // prevent page refresh\n    event.preventDefault()\n    // do what you want with the form data\n    console.log(form)\n  }\n\n  // The JSX for the form binding the functions and state to our inputs\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input\n        type=\"text\"\n        value={form.name}\n        onChange={handleChange}\n        name=\"name\"\n        placeholder=\"write name here\"\n      /&gt;\n      &lt;input\n        type=\"number\"\n        value={form.age}\n        onChange={handleChange}\n        name=\"age\"\n        placeholder=\"write age here\"\n      /&gt;\n      &lt;input type=\"submit\" value=\"Submit Form\" /&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>\n<h3 id=\"exampleofanuncontrolledform\">Example of an Uncontrolled Form</h3>\n<ul>\n<li>a ref created for each input</li>\n<li>handleSubmit for when form is submitted</li>\n</ul>\n<pre><code class=\"js language-js\">import { useRef } from \"react\"\n\nexport default function Form(props) {\n  // ref to get input values\n  const nameInput = useRef(null)\n  const ageInput = useRef(null)\n\n  const handleSubmit = event =&gt; {\n    // prevent page refresh\n    event.preventDefault()\n    // do what you want with the form data\n    console.log({\n      name: nameInput.current.value,\n      age: ageInput.current.value,\n    })\n  }\n\n  // The JSX for the form binding the functions and state to our inputs\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input type=\"text\" ref={nameInput} placeholder=\"write name here\" /&gt;\n      &lt;input type=\"number\" ref={ageInput} placeholder=\"write age here\" /&gt;\n      &lt;input type=\"submit\" value=\"Submit Form\" /&gt;\n    &lt;/form&gt;\n  )\n}\n</code></pre>\n<h2 id=\"part1makingtheapiconnectingittoareactapp\">Part 1 Making The API &amp; Connecting it to a React App</h2>\n<p><center></p>\n<table>\n<thead>\n<tr>\n<th><strong>URL</strong></th>\n<th><strong>HTTP Verb</strong></th>\n<th><strong>Action</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/api/bookmarks/:id</td>\n<td>DELETE</td>\n<td>destroy bookmark</td>\n</tr>\n<tr>\n<td>/api/bookmarks/:id</td>\n<td>PUT</td>\n<td>update bookmark</td>\n</tr>\n<tr>\n<td>/api/bookmarks</td>\n<td>POST</td>\n<td>create bookmark</td>\n</tr>\n<tr>\n<td>/api/users/login</td>\n<td>POST</td>\n<td>Login User</td>\n</tr>\n<tr>\n<td>/api/users/</td>\n<td>POST</td>\n<td>Sign Up User</td>\n</tr>\n<tr>\n<td>/api/users/bookmarks</td>\n<td>GET</td>\n<td>Get Users Bookmarks</td>\n</tr>\n</tbody>\n</table>\n<p></center></p>\n<h2 id=\"user\">User</h2>\n<pre><code class=\"js language-js\">name\nemail\npassword\nbookmarks ref of bookmarks\n</code></pre>\n<h2 id=\"bookmark\">Bookmark</h2>\n<pre><code class=\"js language-js\">title\nlink\n</code></pre>\n<h3 id=\"steps\">Steps</h3>\n<ol>\n<li>Use Create React App to Build App</li>\n<li>Add .env, server.js, .env.example, Models, Controllers, Routes and Config Folders</li>\n<li>Add Mongoose, Morgan, Bcrypt and Jsonwebtoken</li>\n<li>Build Server and config/database</li>\n<li>Build Bookmark Model and User Model</li>\n<li>Build Controllers for Bookmark and User</li>\n<li>Build Router For Bookmarks and User</li>\n<li>Test Login, SignUp, CreateBookmark, ListBookmarksByUser, DeleteBookmark, UpdateBookmark  </li>\n</ol>\n<p><a href=\"https://youtu.be/ZUiLrrf2qVw\"><img src=\"https://res.cloudinary.com/dkqojunzz/image/upload/v1676242311/3_mfqkpu.webp\" alt=\"\" /></a></p>\n<h3 id=\"viewgithubcodeherehttpsgithubcomarthurbernierjrbookmarksytpart1\">View <a href=\"https://github.com/arthurbernierjr/bookmarks-yt-part1\">Github Code Here</a></h3>\n<hr/>\n<h2 id=\"part2usingcomponentstoproperlyseparateconcerns\">Part 2 Using Components to Properly Separate Concerns</h2>\n<h3 id=\"steps-1\">Steps</h3>\n<ol>\n<li>Login, SignUp, CreateBookmark, ListBookmarksByUser, DeleteBookmark, UpdateBookmark Functionality</li>\n<li>Login/SignUp Page and functionality</li>\n<li>BookmarksPage</li>\n<li>CreateBookmark Component and use <code>UseRef for form</code></li>\n<li>Verify created bookmarks get added to list  </li>\n<li>BookmarkList Component</li>\n<li>When Bookmark gets clicked it opens up Bookmark in a new tab</li>\n<li>Bookmark Component  </li>\n<li>Update &amp; Delete Bookmark Functionality applied</li>\n<li>Delete Via Button</li>\n<li>Update Via Conditionally Rendering Input Field Adding New Text and pressing enter</li>\n</ol>\n<pre><code class=\"js language-js\">{ showUpdateInput ?\n  &lt;input type='text' defaultValue={bookmark.title} onKeyPress={(e) =&gt; e.key === 'Enter' &amp;&amp; updateBookmark(e, bookmark._id, setShowUpdateInput) }/&gt;:\n  &lt;span onClick={() =&gt; setShowUpdateInput(true)}&gt;{bookmark.title}&lt;/span&gt;}\n</code></pre>\n<p><a href=\"https://youtu.be/_9FZiXKZTqA\"><img src=\"https://res.cloudinary.com/dkqojunzz/image/upload/v1676242311/4_lhawtf.webp\" alt=\"\" /></a></p>\n<h3 id=\"viewgithubcodeherehttpsgithubcomarthurbernierjrbookmarksytpart2\">View <a href=\"https://github.com/arthurbernierjr/bookmarks-yt-part2\">Github Code Here</a></h3>\n<hr/>\n<h2 id=\"part3usingcssmodulestoproperlystylecomponents\">Part 3 Using CSS Modules to Properly Style Components</h2>\n<h3 id=\"steps-2\">Steps</h3>\n<ol>\n<li>Add Sass</li>\n<li>Style Login/SignUp Page</li>\n<li>Style Bookmark</li>\n<li>Style BookmarkList</li>\n<li>Create Universal Body Styling</li>\n</ol>\n<p><a href=\"https://youtu.be/GeHE_Wv8ml4\"><img src=\"https://res.cloudinary.com/dkqojunzz/image/upload/v1676242311/5_ehuish.webp\" alt=\"\" /></a></p>\n<h3 id=\"viewgithubcodeherehttpsgithubcomarthurbernierjrbookmarksytpart3\">View <a href=\"https://github.com/arthurbernierjr/bookmarks-yt-part3\">Github Code Here</a></h3>\n<hr/>","data":{"title":"Bookmarks MERN","subTitle":"Building A Simple Full Crud MERN App","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"https://res.cloudinary.com/dkqojunzz/image/upload/v1676242311/3_mfqkpu.webp","date":"12/25/22","order":2},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/bigpoppacode.io/api/bookmarks-mern.md","_id":"bookmarks-mern"},{"content":"<p><img src=\"/img/mamba.gif\" alt=\"function\" /></p>\n<h1 id=\"explanation\">Explanation</h1>\n<h2 id=\"whyshouldicareaboutthisijustwanttoknowreact\">Why Should I care about this I just want to know REACT</h2>\n<ul>\n<li>JavaScript Functions are incredibly versatile and in javascript they are what's known as\nfirst class citizens meaning they can be passed around like any other object.</li>\n<li>Functions are literally objects in JS the same way Arrays are as you learned yesterday.</li>\n<li>We will be using Functions everyday in JavaScript so you will learn more and more about them daily through repitition.</li>\n</ul>\n<h2 id=\"setup\">Setup</h2>\n<p>make a file <code>functions.js</code></p>\n<p>Test that a console.log will appear in Terminal when you run the file.</p>\n<pre><code>$ node functions.js\n</code></pre>\n<h2 id=\"whatisafunction\">What is a function?</h2>\n<pre><code class=\"javascript language-javascript\">// 2 ways of creating functions\n\n// function declaration\n     function one () {\n         return 'one'\n     }\n     one()\n\n // function expression\n     const two = () =&gt; {\n         return 2\n     }\n     const shotenedTwo = () =&gt; 2\n</code></pre>\n<h2 id=\"describewhyweusefunctions\">Describe why we use functions</h2>\n<p>Using functions is another application of DRY. Don't Repeat Yourself. With a function, you can store code that can be used conveniently as many times as you wish, without having to rewrite the code each time.</p>\n<h1 id=\"demonstration\">Demonstration</h1>\n<h2 id=\"definingafunction\">Defining a function</h2>\n<pre><code class=\"javascript language-javascript\">const printBoo = () =&gt; {\n    console.log('======');\n    console.log('Boo!');\n    console.log('======');\n};\n</code></pre>\n<p>Always use <strong><code>const</code></strong> to declare your functions. It would be a strange day when a function would need to be reassigned.</p>\n<p>The code will not run yet. The function needs to be <strong>invoked</strong>.</p>\n<h2 id=\"invokeafunction\">Invoke a function</h2>\n<p>Use one line of code to run multiple lines of code</p>\n<pre><code class=\"javascript language-javascript\">printBoo();\n</code></pre>\n<p>Simply use the name of the variable and use <strong>parentheses</strong> to invoke the function.</p>\n<p>If the parentheses are not included, the function will not run.</p>\n<p>The invocation comes <strong>after</strong> the function definition. If you write it beforehand, it will be trying to invoke something that doesn't yet exist according to the interpreter.</p>\n<p>This will work:</p>\n<pre><code class=\"javascript language-javascript\">const printBoo = () =&gt; {\n    console.log('======');\n    console.log('Boo!');\n    console.log('======');\n};\n\nprintBoo();\n</code></pre>\n<p>VS</p>\n<p>This will not:</p>\n<pre><code class=\"javascript language-javascript\">printBoo();\n\nconst printBoo = () =&gt; {\n    console.log('======');\n    console.log('Boo!');\n    console.log('======');\n};\n</code></pre>\n<h1 id=\"imitation\">Imitation</h1>\n<h2 id=\"codealong\">Code Along</h2>\n<ul>\n<li>Write a function <code>printSum</code> that will console.log the result of 10 + 10</li>\n</ul>\n<p><strong>Extra Reps</strong></p>\n<ul>\n<li><p>Write a function <code>printTriangle</code> that will print these pound signs to the console (there are 5 console.logs inside the function):</p>\n<pre><code>#\n##\n###\n####\n#####\n</code></pre></li>\n<li><p>Make it so that <code>printTriangle</code> will print the pound signs using a for loop (there is a for loop and only 1 console.log inside the function).  </p></li>\n<li><p>Make it so that when you can invoke the function with the number of pound signs to print (not just hardcoded to print 5)</p></li>\n</ul>\n<h2 id=\"properlynameafunction\">Properly name a function</h2>\n<p>The variable you use for a function should contain a <strong>verb</strong>. Functions <strong>do</strong> something, most often:</p>\n<ul>\n<li>getting data</li>\n<li>setting data</li>\n<li>checking data</li>\n<li>printing data</li>\n</ul>\n<p>If the purpose of your function is to check data, for example, use the verb <code>check</code> in the variable name.</p>\n<p>Example function that contains a conditional:</p>\n<pre><code class=\"javascript language-javascript\">const checkInputLength = (input) =&gt; {\n    if (input.length &gt; 10) {\n        console.log('input length is greater than 10');\n    } else {\n        console.log('input length is not greater than 10');\n    }\n};\n</code></pre>\n<ol>\n<li>A Function name should always start with a verb</li>\n<li>A function if possible should be pure meaning it shouldn't effect anything outside of itself</li>\n<li>If it does effect something outside of itself you should let the resder of the function know that by the name for example we could have a function that checks if something is or isn't something</li>\n<li>we could also have a function that changes something or <strong>Mutates</strong> something like when you are playing a video game and you score a point, the function that updates the score could be called updateScore or setScore or changeScore</li>\n<li>Functions should try to do <strong>only one thing</strong> If a function, called <code>checkInputLength</code>, does more than just check input, then it is a poor function.</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">    // function that mutates\n    const ricMershon = {\n    age: 21\n    }\n    const scottDraper = {\n    age: 25\n    }\n\n    const increaseAge = (person) =&gt; {\n      person.age += 1\n      console.log (`Horray it's your ${person.age} birthday`)\n    }\n</code></pre>\n<p>Takeaway: Think about appropriate <strong>verbs</strong> to use in your function variable names. The verbs should indicate the <strong>one thing</strong> that the function does.</p>\n<h2 id=\"writeanarrowfunctionwithaparameter\">Write an arrow function with a parameter</h2>\n<p>The preceding function, <code>checkInputLength</code> had a <strong>parameter</strong> called <code>input</code>.</p>\n<p>Functions can receive input that modify their behavior a bit.  This input is called a <strong>parameter</strong>.</p>\n<p>In the below example, the parameter is arbitrarily called <code>name</code>. We can call our parameters whatever we want - whatever makes semantic sense.</p>\n<p>Using <strong>concatenation</strong> I can put the input into a string:</p>\n<pre><code class=\"javascript language-javascript\">const sayName = (name) =&gt; {\n    console.log('Hello! My name is ' + name);\n}\n</code></pre>\n<p>When we <em>invoke</em> the function, we can specify the value of the parameter, this is called an <strong>argument</strong>:</p>\n<pre><code class=\"javascript language-javascript\">sayName(\"Frodo\");\n</code></pre>\n<p>We can continue to invoke the function with whatever <strong>arguments</strong> we want:</p>\n<pre><code class=\"javascript language-javascript\">sayName(\"Merry\");\nsayName(\"Pippin\");\nsayName(\"Sam\");\n</code></pre>\n<p>Each time, the output of the function will change to reflect the argument.</p>\n<h3 id=\"argumentvsparameter\">Argument vs Parameter</h3>\n<p>The <strong>argument</strong> is the input, the <strong>parameter</strong> is how the input is represented in the function.</p>\n<pre><code class=\"javascript language-javascript\">const func = (PARAMETER) =&gt; {\n    // some code\n}\n\nfunc(ARGUMENT);\n</code></pre>\n<h2 id=\"writeanarrowfunctionwithmultipleparameters\">Write an arrow function with multiple parameters</h2>\n<p>A function can take any number of parameters.</p>\n<pre><code class=\"javascript language-javascript\">const calculateArea = (num1, num2) =&gt; {\n    console.log(num1 * num2);\n}\n</code></pre>\n<p>When you invoke the function, you generally want to supply the right number of arguments.</p>\n<pre><code class=\"javascript language-javascript\">calculateArea(4, 4)\n</code></pre>\n<blockquote>\n  <p>=&gt; 16</p>\n</blockquote>\n<h2 id=\"howdoesthisworkakatheexecutioncontextinterviewquestionanswer\">How does this work? Aka (The Execution Context Interview Question Answer)</h2>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\n</code></pre>\n<p>so in our code we have now created a variable myNum on line 1  that is equal to 2 and then created\na variable called sqaure that is equal to the function we created.</p>\n<p>JavaScript does 3 super awesome things that makes it a great very first programming language, and that makes\nit elegant enough to be used by developers with decades of experience.</p>\n<p>We will go over those things as we go through this course but what pertains to us is the awesome feature of the\nJavaScript being single threaded and reading code line by line and executing code only when you ask it to.</p>\n<p>So in JS when it comes to what's running in our code we are never too confused if we remember JS goes line by\nline and 1 at a time.</p>\n<p>And we keep track of this in what's called our Execution Context\n<img src=\"https://media.git.generalassemb.ly/user/15881/files/d4842a00-3df3-11ea-909c-33a0a198c451\" alt=\"js engine 1\" /></p>\n<p>So when the JS Engine looks at our code it will start at the top and perform each operation line by line</p>\n<p><img src=\"https://media.git.generalassemb.ly/user/15881/files/d77f1a80-3df3-11ea-90dd-edd3b3f119ef\" alt=\"js engine 2\" /></p>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\nconst ans = square(myNum)\n</code></pre>\n<p><img src=\"https://media.git.generalassemb.ly/user/15881/files/db12a180-3df3-11ea-8acb-33e15c196cf3\" alt=\"js engine 3 updated\" /></p>\n<p>So as you can see when we call a function we go ahead and add it to the stack of things that we want JS to\ndo. Once JS has finished that task it goes back to the main code on the next line and runs again.</p>\n<p>So once square has completed running it will give us a value and assign it to ans</p>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\nconst ans = square(myNum)\nconsole.log(\"Hello World\")\n</code></pre>\n<p>what order will this happen</p>\n<pre><code class=\"javascript language-javascript\">let myNum = 2;\n\nconst square = (num) =&gt; {\n    return num * num\n}\nconsole.log(\"Hello World\")\nconst ans = square(myNum)\n</code></pre>\n<p>what about this?</p>\n<h2 id=\"breakaproblemdownintosteps\">Break a problem down into steps</h2>\n<p>Write a function that will <strong>return</strong> true if a word is a Palindrome, or will <strong>return</strong> false if not.</p>\n<ul>\n<li>Problem solve one step at a time</li>\n<li>Each step might require research</li>\n</ul>\n<p>Work in layers, one layer at a time. Don't jump ahead until each piece has been tested and works.</p>\n<p>Determine if each step will require research, and research it.</p>\n<ul>\n<li>reverse the word (how?)</li>\n<li>check if the word is the same as the reverse (how?)</li>\n<li>return true or false</li>\n</ul>\n<pre><code class=\"javascript language-javascript\">    // --- Examples:\n    //   palindrome(\"racecar\") === true\n    //   palindrome(\"abcdefghijklmnop\") === false\n</code></pre>\n<h1 id=\"practice\">Practice</h1>\n<h2 id=\"exercises\">Exercises</h2>\n<ul>\n<li><p>Write a function called square that takes in a number and squares it and then assign the result to variable called ans\n<code>javascript\n    square(5); // 25\n</code></p></li>\n<li><p>Write a function called <code>minusOne</code> that takes a parameter <code>num</code>. Assuming the argument is a number, print the argument -1.</p>\n<pre><code class=\"javascript language-javascript\">minusOne(10);        // 9\nminusOne(100);       // 99\nminusOne(Infinity);  // Infinity\n</code></pre></li>\n<li><p>Write a function <code>makeSentence</code> that takes <strong>three</strong> parameters and <strong>concatenates</strong> them into a fully formed sentence.</p>\n<pre><code class=\"javascript language-javascript\">makeSentence('I', 'want', 'chimichangas');\n</code></pre>\n<blockquote>\n  <p>=&gt; 'Oh boy, do I want chimichangas or what?'</p>\n</blockquote></li>\n</ul>\n<p><strong>Extra</strong></p>\n<ul>\n<li><p>Write a function called <code>getLastElement</code> that takes a parameter <code>arr</code>.</p></li>\n<li><p>Invoke the function with an <strong>array</strong> as the argument.</p></li>\n<li><p>The function should print the <strong>last element</strong> within the array.</p>\n<pre><code class=\"javascript language-javascript\">getLastElement([1, 2, 3, 4, 5, 6]);       // 6\ngetLastElement(['a', 'b', 'c']);          // 'c'\ngetLastElement([[1, 2, 3], [4, 5, 6]]);   // [4, 5, 6]\n</code></pre>\n<p><em>Hint:</em> <code>arr[arr.length - 1]</code></p></li>\n</ul>\n<p><strong>Extra</strong></p>\n<ul>\n<li><p>Write a function <code>divideThreeNums</code> that takes <strong>three</strong> parameters and prints the third parameter divided by the result of the second parameter divided by the first.</p>\n<pre><code class=\"javascript language-javascript\">divideThreeNums(10, 5, 2)   // 4\ndivideThreeNums(30, 2, 9)   // 135\n</code></pre></li>\n</ul>\n<h3 id=\"exercisesakaexamplewhiteboardquestionsforjuniordevs\">Exercises ( aka example whiteboard questions for junior devs)</h3>\n<ul>\n<li>Write a function that accepts a string.  The function should capitalize the first letter of each word in the string then\nreturn the capitalized string.</li>\n</ul>\n<pre><code class=\"javascript language-javascript\">    // --- Examples\n    //   capitalize('a short sentence') --&gt; 'A Short Sentence'\n    //   capitalize('a lazy fox') --&gt; 'A Lazy Fox'\n    //   capitalize('look, it is working!') --&gt; 'Look, It Is Working!'\n</code></pre>\n<ul>\n<li><p>Write a function that takes three parameters (numbers), sums them, converts the sum into a string and returns the string (eg. <code>\"123\"</code>)</p>\n<ul>\n<li>Use your google-fu to research converting a number into a string</li>\n<li>Invoke the function a couple of times with different arguments each time</li></ul></li>\n<li><p>Experiment</p>\n<ul>\n<li>What happens if you supply more arguments than there are parameters?</li>\n<li>What happens if you supply fewer arguments than there are parameters?</li></ul></li>\n</ul>","data":{"title":"Functions The First Frontier","subTitle":"An Introduction to Functions in JavaScript","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/functions.png","date":"10/28/21","order":0},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/bigpoppacode.io/api/functions-the-first-frontier.md","_id":"functions-the-first-frontier"},{"content":"<h1 id=\"mernarchitecture\">MERN Architecture</h1>\n<p><img src=\"/img/mern.jpg\" alt=\"\" /></p>\n<h1 id=\"flowofdata\">Flow of Data</h1>\n<p><img src=\"/img/jeopardy.png\" alt=\"\" /></p>\n<h2 id=\"fullappbuild\">Full App Build</h2>\n<p><img src=\"/img/10.png\" alt=\"\" /></p>","data":{"title":"MERN Stack Jeopardy with JService","subTitle":"Building A Simple Full Crud MERN App with an External API","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/10.png","date":"12/25/22","order":4},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/bigpoppacode.io/api/jservice-mern.md","_id":"jservice-mern"},{"content":"<h1 id=\"mernarchitecture\">MERN Architecture</h1>\n<p><img src=\"/img/mern.jpg\" alt=\"\" /></p>\n<h1 id=\"breakdownofjwts\">Breakdown of JWTs</h1>\n<p><img src=\"https://i.imgur.com/IXByEPP.png\" alt=\"\" /></p>\n<h1 id=\"flowofdata\">Flow of Data</h1>\n<p><img src=\"/img/mern2.png\" alt=\"\" /></p>\n<h2 id=\"part1makingthemodelsandsettingupfolderstructure\">Part 1 Making The Models and Setting Up Folder Structure</h2>\n<p><img src=\"/img/mern-ecomm1.png\" alt=\"\" /></p>\n<h2 id=\"part2buildingcontrollersroutesseverandbasiccomponents\">Part 2 Building Controllers, Routes, Sever, and Basic Components</h2>\n<p><img src=\"/img/mern-ecomm2.png\" alt=\"\" /></p>\n<h2 id=\"part3implementingreactrouterandstylingcomponents\">Part 3 Implementing React Router and Styling Components</h2>\n<p><img src=\"/img/mern-ecomm3.png\" alt=\"\" /></p>","data":{"title":"MERN E-Comm App","subTitle":"Building A Simple Full Crud MERN App","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/mern-ecomm.png","date":"12/25/22","order":3},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/bigpoppacode.io/api/mern-ecomm.md","_id":"mern-ecomm"},{"content":"<h1 id=\"mernarchitecture\">MERN Architecture</h1>\n<p><img src=\"/img/mern.jpg\" alt=\"\" /></p>\n<h1 id=\"flowofdata\">Flow of Data</h1>\n<p><img src=\"/img/movieapp.png\" alt=\"\" /></p>\n<h2 id=\"fullappbuild\">Full App Build</h2>\n<p><img src=\"/img/9.png\" alt=\"\" /></p>","data":{"title":"MERN Stack Movie App with OMDB API","subTitle":"Building A Simple Full Crud MERN App with an External API","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/9.png","date":"12/25/22","order":5},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/bigpoppacode.io/api/omdb-api-mern.md","_id":"omdb-api-mern"},{"content":"<h1 id=\"separationofconcerns\">Separation of Concerns</h1>\n<p>Separation of concerns in web development is the practice of breaking down a web application into distinct parts that each handles a separate concern, such as the user interface, business logic, and data access. This helps to improve maintainability, scalability, and reusability of the application.</p>\n<p>Traditionally Frontend is separated into</p>\n<p>HTML: Structure</p>\n<p>CSS: Presentation</p>\n<p>JS: Functionality</p>\n<p><img src=\"/img/htmlcssjs.gif\" alt=\"\" /></p>\n<h1 id=\"adifferentwayofseparatingconcernswithcomponentdrivendevelopment\">A different way of Separating Concerns with Component Driven Development</h1>\n<p><img src=\"https://media.git.generalassemb.ly/user/15881/files/c8fa3780-92ec-11ea-8b7c-8bf723456c19\" alt=\"components\" /></p>\n<p><details></p>\n<p><summary></p>\n<h2 id=\"componentdrivendevelopment\">Component Driven Development</h2>\n<h4 id=\"clickformore\">Click For More</h4>\n<p></summary></p>\n<p>Component Driven Development (CDD) is an approach to web development that makes use of reusable components to create a user interface. It is based on the React JavaScript library and is used to create interactive websites, mobile apps, and other user interfaces. React is a JavaScript library created by Facebook with a focus on performance and scalability.</p>\n<p>CDD makes use of reusable components, or “widgets”, to create a user interface.</p>\n<p>Each component is responsible for rendering a specific part of the user interface, and components can be composed together to create a complete user interface.</p>\n<p>React components are written using JavaScript and the React library provides a set of tools to help developers create and manage components.</p>\n<p>CDD also makes use of a declarative programming style, which makes it easier to write code that is easier to maintain and debug.</p>\n<p>In addition, React's component-driven architecture encourages developers to write modular code, which makes it easier to reuse and update components.</p>\n<p>Finally, React supports server-side rendering, which allows developers to create faster and more responsive user interfaces.</p>\n<p></details></p>\n<p><strong><em>Component Driven Development is a powerful and efficient approach to web development that is based on the React JavaScript library. It makes use of reusable components and a declarative programming style to create user interfaces that are easy to maintain and debug. Additionally, React supports server-side rendering, which allows developers to create faster and more responsive user interfaces.</em></strong></p>\n<p><details></p>\n<p><summary></p>\n<h2 id=\"declarativeprogramming\">Declarative Programming</h2>\n<h4 id=\"clickformore-1\">Click For More</h4>\n<p></summary></p>\n<p>Declarative programming is a programming style in React that focuses on describing the logic of a program, rather than describing the exact steps the program should take to reach a certain outcome. In React, this is achieved by using components, properties, and state.</p>\n<p>Components are the basic building blocks of React, and are used to represent pieces of user interface. They are composed of HTML, JavaScript, and other languages, and can be reused in different parts of the application. Properties are used to provide data to components, while state is used to store data.</p>\n<p>Declarative programming in React allows developers to focus on the logic of the program, rather than the implementation details. This makes it easier to create responsive, reusable, and testable components. It also allows for rapid development, since changes can be made without needing to rewrite the entire application.</p>\n<p></details></p>\n<p><strong><em>Declarative programming in React is an efficient and powerful programming style that allows developers to focus on the logic of their program. It makes applications more responsive and easier to maintain, as well as allowing for faster development.</em></strong></p>\n<p><details></p>\n<p><summary></p>\n<h2 id=\"thevirtualdom\">The Virtual DOM</h2>\n<h4 id=\"clickformore-2\">Click For More</h4>\n<p></summary></p>\n<p>The Virtual DOM is a core concept of React, a JavaScript library used to create user interfaces. The Virtual DOM is a JavaScript representation of the actual DOM, or Document Object Model, which is the tree structure of HTML elements in a web page. The Virtual DOM allows React to make changes to the DOM without having to reload the page or redraw the page.</p>\n<p>The Virtual DOM works by creating a virtual representation of the current DOM and comparing it to the desired state of the DOM. When a change is made, React runs a diffing algorithm which looks for differences between the virtual DOM and the actual DOM. The diffing algorithm then determines which parts of the DOM need to be changed and updates only those parts, instead of having to redraw the entire page. This makes changes to the DOM faster and more efficient.</p>\n<p>React's use of the virtual DOM also allows developers to write more efficient code. Instead of having to write code to manipulate the DOM directly, developers can use React's declarative API to describe the desired state of the DOM, and React will handle the rest. This makes it easier for developers to create complex user interfaces and makes their code less prone to errors.</p>\n<p></details></p>\n<p><strong><em>The Virtual DOM is a core concept of React that allows it to make changes to the DOM without having to reload the page or redraw the page. It works by creating a virtual representation of the current DOM and comparing it to the desired state of the DOM, and then updating only the parts that need to be changed. This makes it faster and more efficient to make changes to the DOM, as well as easier for developers to create complex user interfaces.</em></strong></p>\n<p><details></p>\n<p><summary></p>\n<h2 id=\"reactdevelopertools\">React Developer Tools</h2>\n<h4 id=\"clickformore-3\">Click for More</h4>\n<p></summary></p>\n<p>React Developer Tools is a browser extension for Chrome and Firefox that allows users to inspect and debug React components in their applications. The tool allows developers to see the components, props, state and hierarchy of their React app in an interactive way. It also provides helpful features such as the ability to find components by name, view their source code, and edit them in the browser.</p>\n<p>To install React Developer Tools, first open the Chrome Web Store, then search for “React Developer Tools”. The extension should appear in the search results. Click “Add to Chrome”, then confirm the installation. Once the installation is complete, the React Developer Tools icon should appear in the Chrome toolbar. We will be using the <code>Components Tab</code> in the React Dev Tools.</p>\n<p>The React Developer Tools extension is an invaluable tool for React developers. It allows developers to easily inspect and debug their components, as well as view their props, state and hierarchy. With these features, React developers are able to more quickly identify and fix problems in their apps.</p>\n<p></details></p>\n<p><strong><em>For a new React Learner looking to develop React applications, the React Developer Tools extension is a must-have. With its intuitive interface and helpful features, the extension will provide a wealth of information that can be used to debug and optimize applications. Furthermore, installation is quick and easy, making it a great addition to any React developer’s workflow.</em></strong></p>\n<p><details></p>\n<p><summary></p>\n<h2 id=\"thinkinginreact\">Thinking In React</h2>\n<h4 id=\"clickformore-4\">Click For More</h4>\n<p></summary></p>\n<p>Thinking in React is a concept developed by Facebook to help web developers build user interfaces (UI) more efficiently. It is a component-based approach that focuses on breaking down UI elements into small, reusable components. This allows developers to break down complex tasks into individual, simple parts that can be reused as needed. The main idea behind Thinking in React is to think of the UI as a set of components, or small pieces, that can be moved around, modified, and reused.</p>\n<p>Thinking in React requires developers to break down an application into smaller components, each of which has its own state. State is data that is stored within a component, such as a user’s name or what items are in their shopping cart. By breaking down an app into smaller components, developers can more easily manage application state and make sure that updates only affect the component that needs updating.</p>\n<p>The Thinking in React approach also encourages developers to use one-way data flow. This means that data flows from parent components to child components, rather than from child components to parent components. This helps keep components independent and makes it easier to debug and maintain an application.</p>\n<p></details></p>\n<p><strong><em>Thinking in React is a great tool for building efficient, reusable user interfaces. It encourages developers to break down complex applications into small, reusable components and to use one-way data flow to keep components independent. This helps developers create robust applications quickly and easily.</em></strong></p>\n<h2 id=\"theusestatehook\">The useState Hook</h2>\n<p>The useState hook allows us to generate variables that are special, as updating them would trigger your component and its children to update.</p>\n<p>First step is always importing the useState hook.</p>\n<pre><code class=\"js language-js\">import { useState } from \"react\"\n</code></pre>\n<p>Inside the body of your component function you can then initiate a state variable. The name convention is \"state\" for the variable and \"setState\" for the function that updates the states value.</p>\n<p>If I wanted to create state for a counter it would look like this.</p>\n<pre><code class=\"js language-js\">// initiate counter at 0, setCounter let's me update counter\nconst [counter, setCounter] = useState(0)\n</code></pre>\n<p>So a simple counter component would look like this…</p>\n<pre><code class=\"js language-js\">import { useState } from \"react\"\n\nexport default function Counter(props) {\n  // Declare the state\n  const [counter, setCounter] = useState(0)\n\n  // Function to add one to the state\n  const addOne = () =&gt; {\n    // sets counter to its current value + 1\n    setCounter(counter + 1)\n  }\n\n  // The h1 display the counter and button runs addOne function\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{counter}&lt;/h1&gt;\n      &lt;button onClick={addOne}&gt;Click Me to Add One&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>\n<h3 id=\"thatsassimpleasitgetswhathappenswhenthebuttonisclicked\">That's as simple as it gets. What happens when the button is clicked.</h3>\n<ul>\n<li>setCounter is passed the current value + 1</li>\n<li>React then compares this new value to the old value of counter</li>\n<li>If they are the same, React does nothing (beware of references as values when it comes to objects and arrays, make sure you understand pass by value vs pass by reference remember the <code>arthurshouse taraleeshouse example</code>)</li>\n<li>If they are different then React updates its VirtualDOM based on a re-render of the component and its children</li>\n<li>It then compares the virtualDOM to the real browser DOM and only updates the places in which they differ.</li>\n</ul>\n<p>The above process is why variables that are \"State\" are reactive, meaning the DOM will updates when the value updates. All other variables are not reactive and will not trigger updates when changed.</p>\n<p><strong>NOTE</strong>: If the state is an object or array, make sure you pass a new array or object and not just modify the old one. Objects and Arrays are reference types, so if you pass the old array with modified values the references will still be equal so there will be no update to the DOM.</p>\n<p>Example…</p>\n<p>Don't do this</p>\n<pre><code class=\"js language-js\">// modify the existing state\nstate[0] = 6\n// then setState as the existing state, triggering NO update\nsetState(state)\n</code></pre>\n<p>also don't do this</p>\n<pre><code class=\"js language-js\">// these two variables are both pointing to the same position in memory\nconst updatedState = state\n// no update is triggered\nsetState(updatedState)\n</code></pre>\n<p>Do this</p>\n<pre><code class=\"js language-js\">// create a unique copy of the array\nconst updatedState = [...state]\n// modify the new array\nupdatedState[0] = 6\n// set the State to the updatedArray, DOM will update\nsetState(updatedState)\n</code></pre>\n<h2 id=\"theuseeffecthook\">The useEffect Hook</h2>\n<p>Here is our counter component from earlier with a console.log and second piece of state.</p>\n<pre><code class=\"js language-js\">import { useState } from \"react\"\n\nexport default function Counter(props) {\n  // Declare the state\n  const [counter, setCounter] = useState(0)\n  // second piece of state\n  const [evenCounter, setEvenCounter] = useState(0)\n\n  console.log(\"I'm just a random log\")\n\n  // Function to add one to the state\n  const addOne = () =&gt; {\n    // if counter is even before the update, update evenCounter\n    if (counter % 2 === 0) {\n      setEvenCounter(evenCounter + 1)\n    }\n    // sets counter to its current value + 1\n    setCounter(counter + 1)\n  }\n\n  // The h1 display the counter and button runs addOne function\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{counter}&lt;/h1&gt;\n      &lt;h1&gt;{evenCounter}&lt;/h1&gt;\n      &lt;button onClick={addOne}&gt;Click Me to Add One&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>\n<p>So right now this component displays both counter in its JSX</p>\n<ul>\n<li>when we click the button counter will always go up by 1</li>\n<li>if counter is even before it is increased, evenCounter will go</li>\n</ul>\n<p>Any code in the function body will run again on every render of the component. The component will render with every change of state. So in this case if we keep clicking the button that console.log will run again and again.</p>\n<p>What if we only want it to run when evenCounter changes.</p>\n<p>This is where the useEffect hook comes into play. This hook is a function that takes two arguments:</p>\n<ul>\n<li>A function that will be run immediately when the component loads and anytime any value in the second argument changes</li>\n<li>An array of values, when they change the function will run again. Usually an empty array if you never want the function to run again.</li>\n</ul>\n<pre><code class=\"js language-js\">import { useState, useEffect } from \"react\"\n\nexport default function Counter(props) {\n  // Declare the state\n  const [counter, setCounter] = useState(0)\n  // second piece of state\n  const [evenCounter, setEvenCounter] = useState(0)\n\n  //making sure console.log only runs on certain renders\n  useEffect(() =&gt; {\n    console.log(\"I'm just a random log\")\n  }, [evenCounter])\n\n  // Function to add one to the state\n  const addOne = () =&gt; {\n    // if counter is even before the update, update evenCounter\n    if (counter % 2 === 0) {\n      setEvenCounter(evenCounter + 1)\n    }\n    // sets counter to its current value + 1\n    setCounter(counter + 1)\n  }\n\n  // The h1 display the counter and button runs addOne function\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{counter}&lt;/h1&gt;\n      &lt;h1&gt;{evenCounter}&lt;/h1&gt;\n      &lt;button onClick={addOne}&gt;Click Me to Add One&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>\n<p>So notice the useEffect receives a function that executes our log, and we also gave it an array with evenCounter in it. This means…</p>\n<ul>\n<li>The function will run once when the component is first loaded</li>\n<li>The function will run again only when evenCounter changes</li>\n</ul>\n<p>useEffect is more regularly used for API calls. Usually you'll call the API, get the data then update state inside a useEffect to prevent an infinite loop from occurring.</p>\n<pre><code class=\"js language-js\">const getSomethingFromAPI = async(url) =&gt; {\n try {\n  const response = await fetch(url)\n  const data = await response.json()\n  setState(data)\n }catch(e){\n    console.error(e)\n }\n}\nuseEffect(() =&gt; {\n  getSomethingFromAPI('api url')\n}, [])\n</code></pre>\n<p>Also if the function given to useEffect returns a function, the returned function will be run when the component is removed from the DOM useful for removing event listeners that may be left behind (not something that should come up often)</p>\n<h2 id=\"problemsolving\">Problem Solving</h2>\n<p>ALLLLLLL MY STUDENTS ALWAYS end up being asked at some point in the interview process how to create a Todo List with Basic CRUD capability.</p>\n<p><strong><em>Creating New Todo Items</em></strong></p>\n<p><strong><em>Reading/Seeing Todos</em></strong></p>\n<p><strong><em>Updating Todos that have been created</em></strong></p>\n<p><strong><em>Deleting Todos off the Page</em></strong></p>\n<h2 id=\"part1makingtheapiconnectingittoareactapp\">Part 1 Making The API &amp; Connecting it to a React App</h2>\n<div class=\"iframe-container\">\n<iframe src=\"https://www.youtube.com/embed/u-qbgNNIky8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<p><a href=\"https://github.com/arthurbernierjr/todoyoutube\">GitHub Code</a></p>\n<h2 id=\"part2usingcomponentstoproperlyseparateconcerns\">Part 2 Using Components to Properly Separate Concerns</h2>\n<div class=\"iframe-container\">\n<iframe src=\"https://www.youtube.com/embed/_oOXfYrVGHs\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<p><a href=\"https://github.com/arthurbernierjr/todoyoutubepart2\">GitHub Code</a></p>\n<h2 id=\"part3usingcssmodulestoproperlystylecomponents\">Part 3 Using CSS Modules to Properly Style Components</h2>\n<h1 id=\"inthisvideowewillbeusingcssmodules\">In this video we will be using CSS Modules</h1>\n<p>CSS Modules in JavaScript is a way of writing modularized CSS code, which is locally scoped and composable. This means that each CSS file can only be accessed within the module it is defined in, allowing for better modularity, which makes styles more maintainable and reusable. The syntax for CSS Modules is the same as regular CSS, but with a few extra features. The main feature is the use of the :local() selector, which allows you to assign a unique class name to a given style rule. This unique class name is then used in the HTML file to reference the specific style. This makes it easier to avoid naming collisions and keep code organized.</p>\n<div class=\"iframe-container\">\n<iframe src=\"https://www.youtube.com/embed/OUBVBgPbyNA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<p><a href=\"https://github.com/arthurbernierjr/todoyoutubepart3\">GitHub Code</a></p>\n<p>In a <strong>CSS Module</strong> all class names and animation names are scoped locally by default. All URLs (<code>url(...)</code>) and <code>@imports</code> are in module request format (<code>./xxx</code> and <code>../xxx</code> means relative, <code>xxx</code> and <code>xxx/yyy</code> means in modules folder, i. e. in <code>node_modules</code>).</p>\n<p>CSS Modules compile to a low-level interchange format called ICSS or <a href=\"https://github.com/css-modules/icss\">Interoperable CSS</a>, but are written like normal CSS files:</p>\n<pre><code class=\"css language-css\">/* style.css */\n.className {\n  color: green;\n}\n</code></pre>\n<p>When importing the <strong>CSS Module</strong> from a JS Module, it exports an object with all mappings from local names to global names.</p>\n<pre><code class=\"js language-js\">import styles from \"./style.css\";\n// import { className } from \"./style.css\";\n\nelement.innerHTML = '&lt;div class=\"' + styles.className + '\"&gt;';\n</code></pre>\n<p><strong><em>or in React</em></strong></p>\n<pre><code class=\"js language-js\">import styles from './ComponentName.module.css'\n\nexport default function ComponentName(props){\n  return (\n    &lt;&gt;\n      &lt;div className={styles.className}&gt;\n        Hello World\n      &lt;/div&gt;\n    &lt;/&gt;\n  )\n}\n</code></pre>\n<h2 id=\"usagewithpreprocessorslikesassscss\">Usage with preprocessors like SASS/SCSS</h2>\n<pre><code class=\"scss language-scss\">.card {\n  &amp;Title {\n    color: green;\n  }\n}\n</code></pre>\n<pre><code class=\"js language-js\">import styles from './ComponentName.module.scss'\n\nexport default function ComponentName(props){\n  return (\n    &lt;&gt;\n      &lt;div className={styles.card}&gt;\n        &lt;h2 className={styles.cardTitle}&gt;Green Text&lt;/h2&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  )\n}\n</code></pre>\n<h2 id=\"scss\">SCSS</h2>\n<p>SCSS (Sassy CSS) is a preprocessor language that is used to extend the capabilities of CSS. It provides features like variables, nesting, mixins, and functions to help make CSS easier to maintain and extend. SCSS code is compiled into regular CSS code, which is then used to style the web page.</p>\n<h2 id=\"whycssmoduleswithscsss\">Why CSS Modules with SCSSS?</h2>\n<p><strong>modular</strong> and <strong>reusable</strong> CSS!</p>\n<ul>\n<li>No more conflicts.</li>\n<li>Explicit dependencies.</li>\n<li>No global scope.</li>\n<li>Built in Specificity with nesting</li>\n</ul>\n<h2 id=\"cssmodulesexamplesandsources\">CSS Modules Examples and Sources</h2>\n<ul>\n<li><a href=\"https://github.com/css-modules/webpack-demo\">CSS Modules Webpack Demo</a></li>\n<li><a href=\"https://github.com/outpunk/postcss-modules-example\">PostCSS Modules Example</a></li>\n<li><a href=\"docs/theming.md\">Theming</a></li>\n<li><a href=\"https://github.com/css-modules/browserify-demo\">CSS Modules Browserify Demo</a></li>\n<li><a href=\"https://github.com/x-team/starting-css-modules\">X-team Starting CSS Modules</a></li>\n<li><a href=\"https://github.com/css-modules/css-modules/blob/master/README.md\">CSS Modules Readme</a></li>\n</ul>","data":{"title":"Todo List MERN","subTitle":"Building A Simple Full Crud MERN App","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/todolist.png","date":"12/25/22","order":1},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/bigpoppacode.io/api/todo-mern.md","_id":"todo-mern"}]